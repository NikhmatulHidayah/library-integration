type Query {
  _empty: String
  allLoans: [Loan!]! @field(resolver: "App\\GraphQL\\Queries\\LoanQuery@getAllLoans")
  loanByUser(user_id: ID!): [Loan!]! @field(resolver: "App\\GraphQL\\Queries\\LoanQuery@getLoanByUser")
}

type Mutation {
  createLoan(input: CreateLoanInput!): Loan @field(resolver: "App\\GraphQL\\Mutations\\CreateLoanMutation")
  updateLoanStatus(id: ID!, status: LoanStatus!): Loan @field(resolver: "App\\GraphQL\\Mutations\\UpdateLoanStatusMutation")
  returnBook(id: ID!): Loan @field(resolver: "App\\GraphQL\\Mutations\\ReturnBookMutation")
  lateBook(id: ID!): Loan @field(resolver: "App\\GraphQL\\Mutations\\LateBookMutation")
}

input CreateLoanInput {
  book_id: ID!
  loan_date: String!
  return_date: String
}

enum LoanStatus {
  borrowed
  returned
  late
}

type Loan {
  id: ID!
  user_id: ID!
  book_id: ID!
  loan_date: String!
  return_date: String
  status: LoanStatus!
  created_at: String!
  updated_at: String!
}
